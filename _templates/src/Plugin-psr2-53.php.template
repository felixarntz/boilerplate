<?php
/**
 * Class {{codeVendorNamespace}}\{{codePackageNamespace}}\Plugin
 *
 * @package {{codeVendorNamespace}}\{{codePackageNamespace}}
 * @license GNU General Public License v2 (or later)
 * @link    {{packageUrl}}
 */

namespace {{codeVendorNamespace}}\{{codePackageNamespace}};

/**
 * Main class for the plugin.
 *
 * @since 1.0.0
 */
class Plugin
{

    /**
     * Absolute path to the plugin main file.
     *
     * @since 1.0.0
     * @var string
     */
    protected $main_file;

    /**
     * Main instance of the plugin.
     *
     * @since 1.0.0
     * @var Plugin|null
     */
    protected static $instance = null;

    /**
     * Sets the plugin main file.
     *
     * @since 1.0.0
     *
     * @param string $main_file Absolute path to the plugin main file.
     */
    public function __construct($main_file)
    {
        $this->main_file = $main_file;
    }

    /**
     * Registers the plugin with WordPress.
     *
     * @since 1.0.0
     */
    public function register()
    {
        // TODO: Add hooks here.
    }

    /**
     * Gets the plugin basename, which consists of the plugin directory name and main file name.
     *
     * @since 1.0.0
     *
     * @return string Plugin basename.
     */
    public function basename()
    {
        return plugin_basename($this->main_file);
    }

    /**
     * Gets the absolute path for a path relative to the plugin directory.
     *
     * @since 1.0.0
     *
     * @param string $relative_path Optional. Relative path. Default '/'.
     * @return string Absolute path.
     */
    public function path($relative_path = '/')
    {
        return plugin_dir_path($this->main_file) . ltrim($relative_path, '/');
    }

    /**
     * Gets the full URL for a path relative to the plugin directory.
     *
     * @since 1.0.0
     *
     * @param string $relative_path Optional. Relative path. Default '/'.
     * @return string Full URL.
     */
    public function url($relative_path = '/')
    {
        return plugin_dir_url($this->main_file) . ltrim($relative_path, '/');
    }

    /**
     * Retrieves the main instance of the plugin.
     *
     * @since 1.0.0
     *
     * @return Plugin Plugin main instance.
     */
    public static function instance()
    {
        return static::$instance;
    }

    /**
     * Loads the plugin main instance and initializes it.
     *
     * @since 1.0.0
     *
     * @param string $main_file Absolute path to the plugin main file.
     * @return bool True if the plugin main instance could be loaded, false otherwise.
     */
    public static function load($main_file)
    {
        if (null !== static::$instance) {
            return false;
        }

        static::$instance = new static($main_file);
        static::$instance->register();

        return true;
    }
}
