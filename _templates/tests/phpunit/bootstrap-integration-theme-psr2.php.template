<?php
/**
 * Integration tests bootstrap script.
 *
 * @package {{codeVendorNamespace}}\{{codePackageNamespace}}
 * @license GNU General Public License, version 2
 * @link    {{packageUrl}}
 */

// Detect project directory.
define('TESTS_THEME_DIR', dirname(dirname(__DIR__)));

// Disable xdebug backtrace.
if (function_exists('xdebug_disable')) {
    xdebug_disable();
}

require_once TESTS_THEME_DIR . '/vendor/autoload.php';

// Detect where to load the WordPress tests environment from.
if (getenv('WP_TESTS_DIR') !== false) {
    $test_root = getenv('WP_TESTS_DIR');
} elseif (getenv('WP_DEVELOP_DIR') !== false) {
    $test_root = getenv('WP_DEVELOP_DIR') . '/tests/phpunit';
} elseif (file_exists('/tmp/wordpress-tests-lib/includes/bootstrap.php')) {
    $test_root = '/tmp/wordpress-tests-lib';
} else {
    $test_root = dirname(dirname(dirname(TESTS_THEME_DIR))) . '/tests/phpunit';
}

// PHPUnit < 6.0 compatibility shim.
require_once __DIR__ . '/phpunit-compat.php';

// PHPUnit >= 6.0 shim, which WordPress core only includes itself since version 4.7.
if (!file_exists($test_root . '/includes/phpunit6-compat.php') && class_exists('PHPUnit\Runner\Version') && version_compare(PHPUnit\Runner\Version::id(), '6.0', '>=')) {
    class_alias('PHPUnit\Framework\TestCase', 'PHPUnit_Framework_TestCase');
    class_alias('PHPUnit\Framework\Exception', 'PHPUnit_Framework_Exception');
    class_alias('PHPUnit\Framework\ExpectationFailedException', 'PHPUnit_Framework_ExpectationFailedException');
    class_alias('PHPUnit\Framework\Error\Notice', 'PHPUnit_Framework_Error_Notice');
    class_alias('PHPUnit\Framework\Error\Warning', 'PHPUnit_Framework_Error_Warning');
    class_alias('PHPUnit\Framework\Test', 'PHPUnit_Framework_Test');
    class_alias('PHPUnit\Framework\Warning', 'PHPUnit_Framework_Warning');
    class_alias('PHPUnit\Framework\AssertionFailedError', 'PHPUnit_Framework_AssertionFailedError');
    class_alias('PHPUnit\Framework\TestSuite', 'PHPUnit_Framework_TestSuite');
    class_alias('PHPUnit\Framework\TestListener', 'PHPUnit_Framework_TestListener');
    class_alias('PHPUnit\Util\GlobalState', 'PHPUnit_Util_GlobalState');
    class_alias('PHPUnit\Util\Getopt', 'PHPUnit_Util_Getopt');
    class_alias('PHPUnit\Util\Test', 'PHPUnit_Util_Test');

    // This only needs to be included to that the WP test suite does not call the `getTickets()` method which conflicts.
    define('WP_TESTS_FORCE_KNOWN_BUGS', true);
}

// Ensure the theme is loaded.
$GLOBALS['wp_tests_options'] = array(
    'template'        => basename(TESTS_THEME_DIR),
    'stylesheet'      => basename(TESTS_THEME_DIR),
    'template_root'   => dirname(TESTS_THEME_DIR),
    'stylesheet_root' => dirname(TESTS_THEME_DIR),
);

// Register the custom themes directory.
require_once $test_root . '/includes/functions.php';
tests_add_filter(
    'setup_theme',
    function() {
        register_theme_directory($GLOBALS['wp_tests_options']['stylesheet_root']);
    }
);

// Load the WordPress tests environment.
require_once $test_root . '/includes/bootstrap.php';
